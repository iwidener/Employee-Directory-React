{"version":3,"sources":["components/Container/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","Navbar","type","App","useState","employees","dataEmployee","setDataEmployee","Jumbotron","inline","placeholder","onChange","e","letter","target","value","letterSearch","filter","employee","firstName","toLowerCase","startsWith","console","log","striped","bordered","hover","map","index","key","id","lastName","contactPhone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8SAMeA,MAJf,SAAmBC,GACjB,OAAO,uCAAKC,UAAS,mBAAcD,EAAME,MAAQ,SAAW,KAAUF,K,MCSzDG,MATf,SAAgBH,GACZ,OACI,yBAAKC,UAAU,yDACX,uCAAKA,UAAS,gBAAWD,EAAME,MAAQ,SAAW,KAAUF,IAC5D,yBAAKI,KAAK,W,+BC2DPC,EA1DH,WAAO,IAAD,EAGZC,mBAASC,GAHG,mBAEdC,EAFc,KAEAC,EAFA,KAuBhB,OACE,yBAAKR,UAAU,OACb,kBAACS,EAAA,EAAD,CAAWR,OAAK,GACd,oDADF,MAIE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAqBS,QAAM,GACzB,kBAAC,IAAD,CAA4BP,KAAK,OAAOQ,YAAY,SAASX,UAAU,UAAUY,SA1B3F,SAAsBC,GACtB,IAAMC,EAASD,EAAEE,OAAOC,MAClBC,EAAeX,EAAUY,QAAQ,SAACC,GAAD,OAAcA,EAASC,UAAUC,cAAcC,WAAWR,EAAOO,kBACxGE,QAAQC,IAAIV,GACZN,EAAgBS,QA0BZ,kBAAC,EAAD,KACE,oDAEA,kBAAC,IAAD,CAAsBQ,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC1C,+BACE,4BACE,iCACA,0CACA,yCACA,+CAGJ,+BACGpB,EAAaqB,KApCD,SAACT,EAAUU,GAChC,OACE,wBAAIC,IAAKD,GACP,4BAAKV,EAASY,IACd,4BAAKZ,EAASC,WACd,4BAAKD,EAASa,UACd,4BAAKb,EAASc,uBCdFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.95eded58.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-secondary bg-secondary\">\r\n            <div className={`navbar${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\r\n            <nav type=\"text\" />\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, { useState } from \"react\";\nimport './App.css';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"./components/Container\";\nimport Navbar from \"./components/Navbar\";\nimport employees from \"./data/employees.json\";\nimport * as ReactBootstrap from \"react-bootstrap\";\n\nconst App = () => {\n  const [\n    dataEmployee, setDataEmployee \n  ] = useState(employees)\n\n  function handleSearch(e) {\n  const letter = e.target.value\n  const letterSearch = employees.filter( (employee) => employee.firstName.toLowerCase().startsWith(letter.toLowerCase()))\n  console.log(letter); \n  setDataEmployee(letterSearch);\n  }\n \n  const renderEmployee = (employee, index) => {\n    return (\n      <tr key={index}>\n        <td>{employee.id}</td>\n        <td>{employee.firstName}</td>\n        <td>{employee.lastName}</td>\n        <td>{employee.contactPhone}</td>\n      </tr>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Jumbotron fluid>\n        <h1>Welcome to Home Page</h1>/>\n      </Jumbotron>\n\n        <Navbar>\n          <ReactBootstrap.Form inline>\n            <ReactBootstrap.FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" onChange={handleSearch} />\n          </ReactBootstrap.Form>\n        </ Navbar>\n\n      <Container>\n        <h2>A Table of Employees</h2>\n\n        <ReactBootstrap.Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Contact Phone</th>\n            </tr>\n          </thead>\n          <tbody>\n            {dataEmployee.map(renderEmployee)}\n          </tbody>\n        </ReactBootstrap.Table>\n\n      </Container>\n      \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}